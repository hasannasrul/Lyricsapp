{"version":3,"sources":["component/Nav.js","component/LyricsContext.js","component/Search.js","component/Lyric.js","component/TopTen.js","component/LyricsPage.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","LyricsContext","createContext","LyricsProvider","props","useState","lyrics","setlyrics","useEffect","getlyrics","a","fetch","response","json","data","value","message","body","track_list","Provider","children","Search","input","setinput","query","setquery","useContext","gettrack","res","onSubmit","e","preventDefault","prev","type","placeholder","onChange","target","Lyric","name","artist","index","track","pathname","state","TopTen","map","item","track_name","artist_name","key","track_id","LyricsPage","match","location","getlyric","pbody","setpbody","params","id","lyrics_body","App","path","exact","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.09f1442c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n     \r\n    return (\r\n        <div className=\"Nav\">\r\n            <Link className=\"links\" to=\"/\">\r\n            <h1 >Lyricsify</h1>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import React,{createContext,useEffect,useState} from 'react';\r\n\r\nexport const LyricsContext = createContext()\r\n\r\nexport const LyricsProvider = (props) => {\r\n\r\n    const [lyrics, setlyrics] = useState([])\r\n\r\n    useEffect(() => {getlyrics()}, [])\r\n\r\n        const key = \"9b45c296d458ad04c96e1c16799cfab9\";\r\n    \r\n        const getlyrics = async () => {\r\n            const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/chart.tracks.get?chart_name=top&page=1&page_size=10&country=us&f_has_lyrics=1&apikey=${key}`)\r\n            const data = await response.json();\r\n            const value = data.message.body.track_list;\r\n            setlyrics(value);\r\n        }\r\n\r\n        return(\r\n            <LyricsContext.Provider value={[lyrics, setlyrics]}>\r\n                {props.children}\r\n            </LyricsContext.Provider>\r\n        )\r\n}","import React,{useState,useEffect,useContext} from 'react'\r\nimport { LyricsContext } from './LyricsContext'\r\n\r\nfunction Search() {\r\n\r\n    const [input,setinput] = useState(\"\");\r\n    const [query,setquery] = useState(false);\r\n    const [lyrics,setlyrics] = useContext(LyricsContext)\r\n    \r\n    useEffect(() => {gettrack()}, [!query])\r\n\r\n    const key = \"9b45c296d458ad04c96e1c16799cfab9\";\r\n        const gettrack = async() => {\r\n            const res = await fetch(`https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.search?q_track=${input}&page_size=10&page=1&s_track_rating=desc&apikey=${key}`)\r\n            const data = await res.json();\r\n            const value = data.message.body.track_list;\r\n            setlyrics(value);\r\n            \r\n        }\r\n\r\n    const inputHandler = (e) => {\r\n        setinput(e.target.value);\r\n        \r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        setquery(prev => !prev);\r\n    }\r\n\r\n    return (\r\n\r\n        \r\n\r\n        <div className=\"Search\">\r\n            <h1>Search Lyrics</h1>\r\n            <form onSubmit={submitHandler}>\r\n                <input type=\"text\"\r\n                placeholder=\"Enter Song Name\" \r\n                value={input} \r\n                onChange={inputHandler}/>\r\n                <button>Submit</button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Lyric({name,artist,index,track}) {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <h1>{index+1}. {name}</h1>\r\n            <p>{artist}</p>\r\n            <Link \r\n            to={{\r\n                //specify the path\r\n                pathname: `/LyricsPage/${track}`,\r\n                //passing the props with Link Router\r\n                state: {name}  \r\n            }}>\r\n            <button>Get Lyrics</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Lyric;","import React,{useContext} from 'react'\r\nimport Lyric from \"./Lyric\"\r\nimport { LyricsContext } from './LyricsContext'\r\n\r\nfunction TopTen() {\r\n\r\n    const [lyrics,setlyrics] = useContext(LyricsContext)\r\n    \r\n\r\n\r\n    return (\r\n\r\n        \r\n        <div>\r\n            <h1 className=\"heading\">Top 10 Currently</h1>\r\n            <div className=\"Grid\"> \r\n                {lyrics.map((item,index) => (\r\n                   \r\n                    <Lyric name={item.track.track_name} artist={item.track.artist_name} key={item.track.track_id} track={item.track.track_id} index={index}/>\r\n                    \r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopTen\r\n","import React,{useEffect,useState} from 'react'\r\n\r\n\r\n\r\nfunction LyricsPage({match,location}) {\r\n    \r\n    useEffect(() => {getlyric()}, [])\r\n\r\n    const [pbody, setpbody] = useState(\"\")\r\n\r\n    const apikey = \"9b45c296d458ad04c96e1c16799cfab9\"\r\n\r\n    const getlyric = async () => {\r\n        const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/track.lyrics.get?track_id=${match.params.id}&apikey=${apikey}`)\r\n        const data = await response.json();\r\n        setpbody(data.message.body.lyrics.lyrics_body)\r\n        \r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"LyricsPage\">\r\n            <h3>Sing by: {location.state.name}</h3>\r\n            <p>{pbody}</p>\r\n            <h5>track id: {match.params.id}</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LyricsPage;","import React from 'react';\nimport \"./App.css\";\nimport Nav from \"./component/Nav\";\nimport Search from \"./component/Search\";\nimport TopTen from \"./component/TopTen\";\nimport {LyricsProvider} from \"./component/LyricsContext\";\nimport {BrowserRouter as Router,Route} from \"react-router-dom\"; \nimport LyricsPage from './component/LyricsPage';\n\n\nfunction App() {\n    return (\n\n        <LyricsProvider>\n            <Router>\n            <div className=\"container\">\n                <Nav />\n                <Route path=\"/\" exact component={Search} />\n                <Route path=\"/\" exact component={TopTen} />\n                <Route path=\"/LyricsPage/:id\" component={LyricsPage} />\n            </div>\n            </Router>\n        </LyricsProvider>\n        \n        \n        \n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}